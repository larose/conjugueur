{"version":3,"sources":["components/ConjugationParser.ts","components/SearchBar.tsx","pronouns.ts","components/TenseConjugation.tsx","components/Conjugation.tsx","components/AppBar.tsx","components/Conjugator.tsx","App.tsx","index.tsx"],"names":["parseTense","templateNode","moodName","tenseName","tenseNode","getElementsByTagName","item","Array","from","map","pNode","iNodes","iNode","textContent","parseTemplates","document","conjugations","Map","templates","forEach","templateName","getAttribute","verbConjugation","indicative","present","imperfect","future","simplePast","subjunctive","conditional","imperative","participle","past","set","parseVerbs","verbs","verb","infinitive","template","aspirateH","length","useStyles","makeStyles","theme","createStyles","root","backgroundColor","palette","common","white","borderRadius","shape","width","inputRoot","borderWidth","SearchBar","onChange","onInputChange","candidates","classes","Autocomplete","id","autoHighlight","clearOnEscape","options","getOptionLabel","size","renderInput","params","TextField","variant","autoFocus","noOptionsText","getOptionDisabled","option","filterOptions","state","NON_ELIDED_PRONOUNS","ELIDATED_PRONOUNS","NON_ELIDED_SUBJUNCTIVE_PRONOUNS","ELIDATED_SUBJUNCTIVE_PRONOUNS","NO_PRONOUNS","TenseConjugation","tenseConjugation","pronouns","prefix","cell","borderBottom","Grid","TableContainer","Table","TableBody","personConjugation","index","TableRow","key","TableCell","className","component","scope","join","serializePronoun","align","suffix","vowels","Conjugation","aspiredH","elidedPronouns","verbOption","includes","basicPronouns","subjunctivePronouns","container","direction","justify","alignItems","spacing","templateConjugation","AppBar","searchBar","position","Toolbar","stripDiacritics","string","normalize","replace","truncateOptions","slice","concat","fetchVerbs","a","fetch","response","text","responseBody","domparser","DOMParser","parseFromString","fetchTemplates","computePrefix","seperatorIndex","indexOf","suffixSize","Conjugator","useState","setVerbOption","input","setInput","allVerbs","setAllVerbs","setCandidates","setTemplates","setVerbConjugation","useEffect","normalizedInput","trim","toLowerCase","filteredDecoratedOptions","normalizedCandidate","indexMatch","filter","decoratedOption","sort","b","get","undefined","event","value","reason","App","CssBaseline","Container","maxWidth","Typography","style","height","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.92e2406c.chunk.js","sourcesContent":["import { VerbOption, TemplateConjugation, Templates, TenseConjugationModel } from \"../types\"\n\nfunction parseTense(templateNode: HTMLTemplateElement, moodName: string, tenseName: string) {\n  const moodNode = templateNode.getElementsByTagName(moodName).item(0)!\n  const tenseNode = moodNode.getElementsByTagName(tenseName).item(0)!\n\n  const tenseConjugation: TenseConjugationModel =\n    Array.from(tenseNode.getElementsByTagName(\"p\"))\n      .map(pNode => {\n        const iNodes = pNode.getElementsByTagName(\"i\")\n        return Array.from(iNodes).map(iNode => {\n          return iNode.textContent!\n        })\n      })\n\n  return tenseConjugation\n}\n\nexport function parseTemplates(document: Document): Templates {\n  const conjugations = new Map<string, TemplateConjugation>()\n\n  const templates = document.getElementsByTagName(\"template\")\n\n  Array.from(templates).forEach(templateNode => {\n    const templateName = templateNode.getAttribute(\"name\")!\n\n    const verbConjugation = {\n      indicative: {\n        present: parseTense(templateNode, \"indicative\", \"present\"),\n        imperfect: parseTense(templateNode, \"indicative\", \"imperfect\"),\n        future: parseTense(templateNode, \"indicative\", \"future\"),\n        simplePast: parseTense(templateNode, \"indicative\", \"simple-past\")\n      },\n      subjunctive: {\n        present: parseTense(templateNode, \"subjunctive\", \"present\"),\n        imperfect: parseTense(templateNode, \"subjunctive\", \"imperfect\")\n      },\n      conditional: {\n        present: parseTense(templateNode, \"conditional\", \"present\"),\n      },\n      imperative: {\n        present: parseTense(templateNode, \"imperative\", \"imperative-present\")\n      },\n      participle: {\n        present: parseTense(templateNode, \"participle\", \"present-participle\"),\n        past: parseTense(templateNode, \"participle\", \"past-participle\")\n      }\n    }\n\n    conjugations.set(templateName, verbConjugation)\n  })\n\n  return conjugations\n}\n\nexport function parseVerbs(document: Document): Array<VerbOption> {\n  const verbs = document.getElementsByTagName(\"v\")\n\n  const conjugations = Array.from(verbs).map((verb) => {\n    const infinitive = verb.getElementsByTagName(\"i\").item(0)!.textContent!\n    const template = verb.getElementsByTagName(\"t\").item(0)!.textContent!\n    const aspirateH = verb.getElementsByTagName(\"aspirate-h\").length !== 0\n\n    return { infinitive, template, aspirateH }\n  })\n\n  return conjugations\n}\n","import Autocomplete from '@material-ui/lab/Autocomplete';\nimport { VerbOption } from '../types';\nimport { TextField, createStyles, makeStyles, Theme, fade } from '@material-ui/core';\nimport React from 'react';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            backgroundColor: theme.palette.common.white, // fade(theme.palette.common.white, 0.90),\n            '&:hover': {\n                backgroundColor: theme.palette.common.white, // fade(theme.palette.common.white, 0.100),\n            },\n            borderRadius: theme.shape.borderRadius,\n            width: \"100%\"\n        },\n        inputRoot: {\n            \"& .MuiOutlinedInput-notchedOutline\": {\n                borderWidth: 0\n            },\n            \"&:hover .MuiOutlinedInput-notchedOutline\": {\n                borderWidth: 0\n            },\n            \"&.Mui-focused .MuiOutlinedInput-notchedOutline\": {\n                borderWidth: 0\n            }\n        }\n    })\n)\n\ninterface SearchBarProps {\n    candidates: Array<VerbOption>\n    onChange: any\n    onInputChange: any\n}\n\nexport function SearchBar({ onChange, onInputChange, candidates }: SearchBarProps) {\n    const classes = useStyles()\n\n    return (<Autocomplete<VerbOption>\n        id=\"verb-input\"\n        autoHighlight\n        clearOnEscape\n        options={candidates}\n        getOptionLabel={verb => verb.infinitive}\n        onChange={onChange}\n        onInputChange={onInputChange}\n        classes={classes}\n        size=\"small\"\n        renderInput={params => (\n            <TextField {...params} variant=\"outlined\" autoFocus={true} />\n        )}\n        noOptionsText=\"Aucun verbe trouvé\"\n        getOptionDisabled={option => {\n            return option.infinitive === \"...\"\n        }}\n        filterOptions={(options: VerbOption[], state: object) => options}\n    />)\n}\n","export type Pronouns = Array<Array<String>>\n\nexport const NON_ELIDED_PRONOUNS: Pronouns = [\n    [\"je\"],\n    [\"tu\"],\n    [\"il\", \"elle\"],\n    [\"nous\"],\n    [\"vous\"],\n    [\"ils\", \"elles\"]\n]\n\nexport const ELIDATED_PRONOUNS: Pronouns = [\n    [\"j'\"],\n    [\"tu\"],\n    [\"il\", \"elle\"],\n    [\"nous\"],\n    [\"vous\"],\n    [\"ils\", \"elles\"]\n]\n\nexport const NON_ELIDED_SUBJUNCTIVE_PRONOUNS: Pronouns = [\n    [\"que je\"],\n    [\"que tu\"],\n    [\"qu'il\", \"qu'elle\"],\n    [\"que nous\"],\n    [\"que vous\"],\n    [\"qu'ils\", \"qu'elles\"]\n]\n\nexport const ELIDATED_SUBJUNCTIVE_PRONOUNS: Pronouns = [\n    [\"que j'\"],\n    [\"que tu\"],\n    [\"qu'il\", \"qu'elle\"],\n    [\"que nous\"],\n    [\"que vous\"],\n    [\"qu'ils\", \"qu'elles\"]\n]\n\nexport const NO_PRONOUNS: Pronouns = [\n    [],\n    [],\n    [],\n    []\n]\n","import React from \"react\"\nimport { Grid, TableContainer, Table, TableBody, TableRow, TableCell, makeStyles } from \"@material-ui/core\"\nimport { Pronouns } from \"../pronouns\";\nimport { TenseConjugationModel } from \"../types\"\n\nfunction serializePronoun(pronouns: Array<Array<String>>, index: number): string {\n    return pronouns[index].join(\", \")\n}\n\ninterface TenseConjugationProps {\n    tenseName: string\n    tenseConjugation: TenseConjugationModel\n    pronouns: Pronouns\n    prefix: string\n}\n\nexport function TenseConjugation({ tenseName, tenseConjugation, pronouns, prefix }: TenseConjugationProps) {\n    const useStyles = makeStyles({\n        cell: {\n            borderBottom: \"none\"\n        },\n    });\n\n    const classes = useStyles();\n\n    return (\n        <Grid item>\n            <h3>{tenseName}</h3>\n            <TableContainer>\n                <Table size=\"small\">\n                    <TableBody>\n                        {tenseConjugation.map((personConjugation, index) => {\n                            return <TableRow key={index}>\n                                <TableCell className={classes.cell} component=\"th\" scope=\"row\">\n                                    {serializePronoun(pronouns, index)}\n                                </TableCell>\n                                <TableCell className={classes.cell} align=\"left\">\n                                    {personConjugation.map(suffix => prefix + suffix).join(\", \")}\n                                </TableCell>\n                            </TableRow>\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </Grid>\n    )\n}\n","import { makeStyles, Grid, TableContainer, Table, TableBody, TableCell, TableRow } from \"@material-ui/core\";\nimport React from \"react\";\nimport { VerbConjugation } from \"../types\";\nimport { NON_ELIDED_PRONOUNS, NO_PRONOUNS, ELIDATED_PRONOUNS, ELIDATED_SUBJUNCTIVE_PRONOUNS, NON_ELIDED_SUBJUNCTIVE_PRONOUNS } from \"../pronouns\";\nimport { TenseConjugation } from \"./TenseConjugation\";\n\nconst vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n\nfunction useElidedPronouns(infinitive: string, aspiredH: boolean) {\n  if (vowels.includes(infinitive[0])) {\n    return true\n  }\n\n  if (infinitive[0] != \"h\") {\n    return false\n  }\n\n  return !aspiredH\n}\n\ninterface ConjugationProps {\n  verbConjugation: VerbConjugation\n}\n\nexport function Conjugation({ verbConjugation }: ConjugationProps) {\n  const elidedPronouns = useElidedPronouns(verbConjugation.verbOption.infinitive, verbConjugation.verbOption.aspirateH)\n  const basicPronouns = elidedPronouns ? ELIDATED_PRONOUNS : NON_ELIDED_PRONOUNS\n  const subjunctivePronouns = elidedPronouns ? ELIDATED_SUBJUNCTIVE_PRONOUNS : NON_ELIDED_SUBJUNCTIVE_PRONOUNS\n\n  return (\n    <div>\n      <h1>{verbConjugation.verbOption.infinitive}</h1>\n\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"flex-start\"\n        alignItems=\"flex-start\"\n        spacing={4}\n      >\n        <TenseConjugation\n          tenseName={\"Indicatif présent\"}\n          tenseConjugation={verbConjugation.templateConjugation.indicative.present}\n          prefix={verbConjugation.prefix}\n          pronouns={basicPronouns}\n        />\n\n        <TenseConjugation\n          tenseName={\"Indicatif imparfait\"}\n          tenseConjugation={verbConjugation.templateConjugation.indicative.imperfect}\n          prefix={verbConjugation.prefix}\n          pronouns={basicPronouns}\n        />\n\n        <TenseConjugation\n          tenseName={\"Indicatif futur\"}\n          tenseConjugation={verbConjugation.templateConjugation.indicative.future}\n          prefix={verbConjugation.prefix}\n          pronouns={basicPronouns}\n        />\n\n        <TenseConjugation\n          tenseName={\"Indicatif passé simple\"}\n          tenseConjugation={verbConjugation.templateConjugation.indicative.simplePast}\n          prefix={verbConjugation.prefix}\n          pronouns={basicPronouns}\n        />\n\n        <TenseConjugation\n          tenseName={\"Conditionel présent\"}\n          tenseConjugation={verbConjugation.templateConjugation.conditional.present}\n          prefix={verbConjugation.prefix}\n          pronouns={basicPronouns}\n        />\n\n        <TenseConjugation\n          tenseName={\"Subjonctif présent\"}\n          tenseConjugation={verbConjugation.templateConjugation.subjunctive.present}\n          prefix={verbConjugation.prefix}\n          pronouns={subjunctivePronouns}\n        />\n\n        <TenseConjugation\n          tenseName={\"Subjonctif imparfait\"}\n          tenseConjugation={verbConjugation.templateConjugation.subjunctive.imperfect}\n          prefix={verbConjugation.prefix}\n          pronouns={subjunctivePronouns}\n        />\n\n        <TenseConjugation\n          tenseName={\"Impératif présent\"}\n          tenseConjugation={verbConjugation.templateConjugation.imperative.present}\n          prefix={verbConjugation.prefix}\n          pronouns={NO_PRONOUNS}\n        />\n\n        <TenseConjugation\n          tenseName={\"Participe présent\"}\n          tenseConjugation={verbConjugation.templateConjugation.participle.present}\n          prefix={verbConjugation.prefix}\n          pronouns={NO_PRONOUNS}\n        />\n\n        <TenseConjugation\n          tenseName={\"Participe passé\"}\n          tenseConjugation={verbConjugation.templateConjugation.participle.past}\n          prefix={verbConjugation.prefix}\n          pronouns={NO_PRONOUNS}\n        />\n\n      </Grid>\n\n    </div >\n  )\n}\n","import React from \"react\";\nimport { Toolbar, Typography, Button, AppBar as MuiAppBar, makeStyles } from \"@material-ui/core\";\n\nimport { SearchBar } from \"./SearchBar\"\n\n\nconst useStyles = makeStyles({\n\n});\n\ninterface AppBarProps {\n    searchBar: React.ReactNode\n}\n\nexport function AppBar({searchBar} : AppBarProps) {\n\n    const classes = useStyles();\n\n    return (\n        <MuiAppBar position=\"static\">\n            <Toolbar>\n                {searchBar}\n            </Toolbar>\n        </MuiAppBar>\n    )\n}\n","import { useState, useEffect } from \"react\"\nimport { VerbOption, Templates, VerbConjugation } from \"../types\"\nimport { parseVerbs, parseTemplates } from \"./ConjugationParser\"\nimport React from \"react\"\nimport { SearchBar } from \"./SearchBar\"\nimport { Conjugation } from \"./Conjugation\"\nimport { AppBar } from \"./AppBar\"\n\nfunction stripDiacritics(string: string) {\n    return typeof string.normalize !== 'undefined'\n        ? string.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\n        : string;\n}\n\nfunction truncateOptions(options: Array<VerbOption>): Array<VerbOption> {\n    if (options.length < 8) {\n        return options\n    }\n\n    const truncatedOptions = options.slice(0, 7)\n    return truncatedOptions.concat([{ infinitive: \"...\", template: \"\", aspirateH: false }])\n}\n\nfunction filterOptions(options: Array<VerbOption>, input: string): Array<VerbOption> {\n    const normalizedInput = stripDiacritics(input.trim().toLowerCase());\n    if (normalizedInput.length === 0) {\n        return truncateOptions(options)\n    }\n\n    const decoratedOptions = options.map(option => {\n        const normalizedCandidate = stripDiacritics(option.infinitive.trim().toLowerCase())\n        const indexMatch = normalizedCandidate.indexOf(normalizedInput)\n\n        return {\n            option,\n            indexMatch\n        }\n    })\n\n    const filteredDecoratedOptions = decoratedOptions.filter(decoratedOption => {\n        return decoratedOption.indexMatch > -1\n    })\n    filteredDecoratedOptions.sort((a, b) => {\n        if (a.indexMatch !== b.indexMatch) {\n            return a.indexMatch - b.indexMatch\n        }\n\n        return a.option.infinitive.length - b.option.infinitive.length\n    })\n\n    const filteredOptions = filteredDecoratedOptions.map(decoratedOption => decoratedOption.option)\n\n    return truncateOptions(filteredOptions)\n}\n\nasync function fetchVerbs() {\n    const response = await fetch(\"verbs-fr.xml\")\n    const responseBody = await response.text()\n    const domparser = new DOMParser()\n    const document = domparser.parseFromString(responseBody, \"application/xml\")\n    return parseVerbs(document)\n}\n\nasync function fetchTemplates() {\n    const response = await fetch(\"conjugation-fr.xml\")\n    const responseBody = await response.text()\n    const domparser = new DOMParser()\n    const document = domparser.parseFromString(responseBody, \"application/xml\")\n    return parseTemplates(document)\n}\n\nfunction computePrefix(infinitive: string, templateName: string): string {\n    const seperatorIndex = templateName.indexOf(\":\")\n    const suffixSize = templateName.length - seperatorIndex - 1\n    return infinitive.slice(0, infinitive.length - suffixSize)\n}\n\nexport function Conjugator() {\n    const [verbOption, setVerbOption] = useState<VerbOption | null>(null)\n    const [input, setInput] = useState<string>(\"\")\n    const [allVerbs, setAllVerbs] = useState<Array<VerbOption>>([])\n    const [candidates, setCandidates] = useState<Array<VerbOption>>([])\n    const [templates, setTemplates] = useState<Templates>(new Map())\n    const [verbConjugation, setVerbConjugation] = useState<VerbConjugation | null>(null)\n\n    function onChange(event: React.ChangeEvent<{}>, value: VerbOption) {\n        setVerbOption(value)\n    }\n\n    function onInputChange(event: React.ChangeEvent<{}>, value: string, reason: string) {\n        setInput(value)\n    }\n\n    useEffect(() => {\n        (async () => {\n            const verbs = await fetchVerbs()\n            setAllVerbs(verbs)\n        })()\n    }, [])\n\n    useEffect(() => {\n        (async () => {\n            const templates = await fetchTemplates()\n            setTemplates(templates)\n        })()\n    }, [])\n\n    useEffect(() => {\n        const candidates = filterOptions(allVerbs, input)\n        setCandidates(candidates)\n    }, [input, allVerbs])\n\n    useEffect(() => {\n        if (verbOption === null) {\n            setVerbConjugation(null)\n            return\n        }\n\n        const templateConjugation = templates.get(verbOption.template)\n        if (templateConjugation === undefined) {\n            setVerbConjugation(null)\n            return\n        }\n\n        setVerbConjugation({\n            verbOption,\n            prefix: computePrefix(verbOption.infinitive, verbOption.template),\n            templateConjugation,\n\n        })\n    }, [verbOption, templates])\n\n    const searchBar = <SearchBar\n        onChange={onChange}\n        onInputChange={onInputChange}\n        candidates={candidates}\n    />\n\n    if (verbConjugation === null) {\n        return (\n            <div>\n                <AppBar searchBar={searchBar} />\n            </div>\n        )\n    }\n\n    return (\n        <div>\n            <AppBar searchBar={searchBar} />\n            <Conjugation verbConjugation={verbConjugation} />\n        </div>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport { Container } from '@material-ui/core';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport { Conjugator } from './components/Conjugator';\n\nfunction App() {\n  return (\n    <>\n      <CssBaseline />\n      <Container maxWidth=\"md\">\n        <Typography component=\"div\" style={{ height: '100vh' }}>\n          <Conjugator />\n        </Typography>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}